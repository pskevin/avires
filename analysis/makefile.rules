##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := mem_trace

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.
# Build the intermediate object file.
# $(OBJDIR)mem_trace$(OBJ_SUFFIX): mem_trace.cpp $(OBJDIR)mmgr_simple$(OBJ_SUFFIX) $(OBJDIR)mmgr_linux$(OBJ_SUFFIX) $(OBJDIR)memsim_new$(OBJ_SUFFIX) $(OBJDIR)two_level_tlb$(OBJ_SUFFIX)
# 	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# $(OBJDIR)l1_data_cache$(OBJ_SUFFIX): l1_data_cache.cpp l1_data_cache.h
# 	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# # Build the intermediate object file.
# $(OBJDIR)two_level_tlb$(OBJ_SUFFIX): two_level_tlb.cpp two_level_tlb.h
# 	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# # Build the intermediate object file.
# $(OBJDIR)mmgr_simple$(OBJ_SUFFIX): mmgr_simple.cpp mmgr_simple.h
# 	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# # Build the intermediate object file.
# $(OBJDIR)mmgr_linux$(OBJ_SUFFIX): mmgr_linux.cpp mmgr_linux.h
# 	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# # Build the intermediate object file.
# $(OBJDIR)memsim_new$(OBJ_SUFFIX): memsim_new.cpp memsim_new.h shared_new.h
# 	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# # Build the tool as a dll (shared object).
# $(OBJDIR)mem_trace$(PINTOOL_SUFFIX): $(OBJDIR)mem_trace$(OBJ_SUFFIX) $(OBJDIR)mmgr_simple$(OBJ_SUFFIX) $(OBJDIR)mmgr_linux$(OBJ_SUFFIX) $(OBJDIR)memsim_new$(OBJ_SUFFIX) $(OBJDIR)two_level_tlb$(OBJ_SUFFIX) $(OBJDIR)l1_data_cache$(OBJ_SUFFIX)
# 	$(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $(^:%.h=) $(TOOL_LPATHS) $(TOOL_LIBS)

