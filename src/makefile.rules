##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := main

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.
# Build the intermediate object file.

subsystem_headers := $(shell find ./subsystem/include/ -name *.h)

MEMSIM_DEBUG=0

TOOL_CXXFLAGS += -DMEMSIM_LOGGING=${MEMSIM_DEBUG}

# TOOL_CXXFLAGS:=$(filter-out -fno-rtti,$(TOOL_CXXFLAGS))

# Build the intermediate object file.

# Build the intermediate object file.


$(OBJDIR)tlb$(OBJ_SUFFIX): ./subsystem/include/controllers/tlb.cc 
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

$(OBJDIR)write$(OBJ_SUFFIX): ./subsystem/include/events/write.cc $(OBJDIR)interface$(OBJ_SUFFIX)
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

$(OBJDIR)sim_time$(OBJ_SUFFIX): ./subsystem/include/events/simulated_time.cc 
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

$(OBJDIR)exec_time$(OBJ_SUFFIX): ./subsystem/include/events/execution_time.cc 
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

$(OBJDIR)access$(OBJ_SUFFIX): ./subsystem/include/events/access.cc
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)log$(OBJ_SUFFIX): ./subsystem/include/utils/log.cc
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

$(OBJDIR)interface$(OBJ_SUFFIX): ./subsystem/include/events/interface.cc $(OBJDIR)log$(OBJ_SUFFIX) $(OBJDIR)access$(OBJ_SUFFIX) $(OBJDIR)exec_time$(OBJ_SUFFIX) $(OBJDIR)sim_time$(OBJ_SUFFIX) $(OBJDIR)tlb$(OBJ_SUFFIX)
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)page$(OBJ_SUFFIX): ./subsystem/include/models/page.cc
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)l1d$(OBJ_SUFFIX): ./subsystem/cache/l1d.cc $(OBJDIR)page$(OBJ_SUFFIX) $(OBJDIR)interface$(OBJ_SUFFIX) $(OBJDIR)access$(OBJ_SUFFIX) $(OBJDIR)exec_time$(OBJ_SUFFIX) $(OBJDIR)sim_time$(OBJ_SUFFIX)
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)two_level$(OBJ_SUFFIX): ./subsystem/tlb/two_level.cc $(OBJDIR)tlb$(OBJ_SUFFIX) $(OBJDIR)page$(OBJ_SUFFIX) $(OBJDIR)interface$(OBJ_SUFFIX) $(OBJDIR)access$(OBJ_SUFFIX) $(OBJDIR)exec_time$(OBJ_SUFFIX) $(OBJDIR)sim_time$(OBJ_SUFFIX)
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)fcfs$(OBJ_SUFFIX): ./subsystem/memory/fcfs.cc $(OBJDIR)page$(OBJ_SUFFIX) $(OBJDIR)log$(OBJ_SUFFIX) $(OBJDIR)interface$(OBJ_SUFFIX) $(OBJDIR)access$(OBJ_SUFFIX) $(OBJDIR)exec_time$(OBJ_SUFFIX) $(OBJDIR)sim_time$(OBJ_SUFFIX)
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

$(OBJDIR)page_walk$(OBJ_SUFFIX): ./subsystem/page_table_walk.cc $(OBJDIR)fcfs$(OBJ_SUFFIX) $(OBJDIR)page$(OBJ_SUFFIX) $(OBJDIR)log$(OBJ_SUFFIX) $(OBJDIR)interface$(OBJ_SUFFIX) $(OBJDIR)access$(OBJ_SUFFIX) $(OBJDIR)exec_time$(OBJ_SUFFIX) $(OBJDIR)sim_time$(OBJ_SUFFIX)
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

$(OBJDIR)subsystem$(OBJ_SUFFIX): ./subsystem/simulator.cc $(OBJDIR)page_walk$(OBJ_SUFFIX) $(OBJDIR)fcfs$(OBJ_SUFFIX) $(OBJDIR)l1d$(OBJ_SUFFIX) $(OBJDIR)two_level$(OBJ_SUFFIX) $(OBJDIR)page$(OBJ_SUFFIX) $(OBJDIR)log$(OBJ_SUFFIX) $(OBJDIR)interface$(OBJ_SUFFIX) $(OBJDIR)access$(OBJ_SUFFIX) $(OBJDIR)exec_time$(OBJ_SUFFIX) $(OBJDIR)sim_time$(OBJ_SUFFIX) $(OBJDIR)tlb$(OBJ_SUFFIX)
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

$(OBJDIR)main$(OBJ_SUFFIX): main.cc $(OBJDIR)subsystem$(OBJ_SUFFIX) $(OBJDIR)page$(OBJ_SUFFIX) $(OBJDIR)log$(OBJ_SUFFIX) $(OBJDIR)interface$(OBJ_SUFFIX) $(OBJDIR)write$(OBJ_SUFFIX) $(OBJDIR)tlb$(OBJ_SUFFIX)
	$(CXX) -std=c++14 $(TOOL_CXXFLAGS) -ltr $(COMP_OBJ)$@ $<

# Build the tool as a dll (shared object).
$(OBJDIR)main$(PINTOOL_SUFFIX): $(OBJDIR)main$(OBJ_SUFFIX) $(OBJDIR)subsystem$(OBJ_SUFFIX) $(OBJDIR)page_walk$(OBJ_SUFFIX) $(OBJDIR)fcfs$(OBJ_SUFFIX) $(OBJDIR)l1d$(OBJ_SUFFIX) $(OBJDIR)two_level$(OBJ_SUFFIX) $(OBJDIR)page$(OBJ_SUFFIX) $(OBJDIR)log$(OBJ_SUFFIX) $(OBJDIR)write$(OBJ_SUFFIX) $(OBJDIR)interface$(OBJ_SUFFIX) $(OBJDIR)access$(OBJ_SUFFIX) $(OBJDIR)exec_time$(OBJ_SUFFIX) $(OBJDIR)sim_time$(OBJ_SUFFIX) $(OBJDIR)tlb$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $(^:%.h=) $(TOOL_LPATHS) $(TOOL_LIBS)

